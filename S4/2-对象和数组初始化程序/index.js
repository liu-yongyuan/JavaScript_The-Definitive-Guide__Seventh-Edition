[]; // 空数组
[1 + 2, 3 + 4]; // 两个元素的数组

/**
 * 数组初始化程序中的元素表达式本身也可以是数组初始化程序, 这意味着
 * 以下表达式可以创建嵌套数组:
 */
let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

/**
 * 数组字面量中省略都好间的值可以包含未定义元素.
 * 例如,以下数组包含 5 个元素, 其中 3 个未定义元素:
 */
let sparseArray = [1, , , , 5];

/**
 * 数组初始化程序的醉胡一个表达式后面可以再跟一个逗号,而且这个逗号不会创建
 * 未定义元素. 不过通过数组访问表达式访问最后一个表达式后面的所以一定会求值
 * 为 undefined.
 */
// let sparseArray1 = [1, 2, 3, 4,];
// sparseArray1[4] => undefined

/**
 * 对象初始化程序表达式与数组出火花程序表达式类型, 但方括号变成了花括号, 且每个
 * 子表达式前面多了一个属性名和冒号:
 */
let p = { x: 2.3, y: -1.2 }; // 有两个属性的对象

let q = {}; // 没有属性的空对象
// 现在 q 拥有了跟 p 一样的属性
q.x = 2.3;
q.y = -1.2;

let rectangle = {
  upperLeft: { x: 2, y: 2 },
  lowerRight: { x: 4, y: 5 },
};
